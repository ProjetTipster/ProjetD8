<?php

/**
 * @file
 * Contains tipster.module..
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Entity\Entity\EntityFormDisplay;
use Drupal\profile\Entity\Profile;
use Drupal\profile\Entity\ProfileType;
use Drupal\field\FieldConfigInterface;
use Drupal\Core\Form\FormStateInterface;
/**
 * Implements hook_help().
 */
function tipster_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the tipster module.
    case 'help.page.tipster':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('tipster module') . '</p>';
      return $output;

    default:
  }
}


/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Add available profile forms to the user registration form.
 */

function tipster_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
   /*if (isset($form['type']) && $form['type']['#value'] . '_node_settings' == $form_id) {
        $upload_enabled_types = \Drupal::config('mymodule.settings')->get('upload_enabled_types');
        $form['workflow']['upload_' . $form['type']['#value']] = array(
            '#type' => 'radios',
            '#title' => t('Attachments'),
            '#default_value' => in_array($form['type']['#value'], $upload_enabled_types) ? 1 : 0,
            '#options' => array(t('Disabled'), t('Enabled')),
        );
        // Add a custom submit handler to save the array of types back to the config file.
        $form['actions']['submit']['#submit'][] = 'mymodule_upload_enabled_types_submit';
    }*/
//   kint($form_id);
   // die();
}


function tipster_form_user_register_form_alter(&$form, FormStateInterface $form_state) {

    $attached_profile_form = FALSE;
    $weight = 90;
    $form['profile_utilisateur'] = array(
        '#type' => 'radios',
        '#title' => t('Choisissez le type de profile : '),
        '#options' => array('tipster' => t('Tipster'), 'follower' => t('Follower')),
    );

    /** @var ProfileType[] $profile_types */
    $profile_types = ProfileType::loadMultiple();
    foreach ($profile_types as $profile_type) {
        $instances = array_filter(\Drupal::service('entity_field.manager')->getFieldDefinitions('profile', $profile_type->id()), function ($field_definition) {
            return $field_definition instanceof FieldConfigInterface;
        });

        if ($profile_type->getRegistration() === TRUE && count($instances)) {
            $property = ['profiles', $profile_type->id()];
            $profile = $form_state->get($property);
            if (empty($profile)) {
                $profile = Profile::create([
                    'type' => $profile_type->id(),
                    'langcode' => $profile_type->language() ?
                        $profile_type->language() : \Drupal::languageManager()->getDefaultLanguage()->getId(),
                ]);

                // Attach profile entity form.
                $form_state->set($property, $profile);
            }
            $form_state->set('form_display_' . $profile_type->id(), EntityFormDisplay::collectRenderDisplay($profile, 'default'));

            $form['entity_' . $profile_type->id()] = [
                '#type' => 'details',
                '#title' => $profile_type->label(),
                '#tree' => TRUE,
                '#parents' => ['entity_' . $profile_type->id()],
                '#weight' => ++$weight,
                '#open' => TRUE,
            ];
            $form_state
                ->get('form_display_' . $profile_type->id())
                ->buildForm($profile, $form['entity_' . $profile_type->id()], $form_state);

            $attached_profile_form = TRUE;
        }
    }

    if ($attached_profile_form) {
        $form['actions']['submit']['#validate'][] = 'tipster_form_user_register_form_validate';
        $form['actions']['submit']['#submit'][] = 'tipster_form_user_register_form_submit';
    }
}

/**
 * Extra form validation handler for the user registration form.
 */
function tipster_form_user_register_form_validate(array &$form, FormStateInterface $form_state) {
    $profiles = $form_state->get('profiles');
    if (!empty($profiles)) {
        foreach ($profiles as $bundle => $entity) {
            /** @var \Drupal\Core\Entity\Display\EntityFormDisplayInterface $form_display */
            $form_display = $form_state->get('form_display_' . $bundle);
            $form_display->extractFormValues($entity, $form['entity_' . $bundle], $form_state);
            $form_display->validateFormValues($entity, $form['entity_' . $bundle], $form_state);
        }
    }
    // Entity was validated in entityFormValidate(). This will prevent validation
    // exception from being thrown.
    $form_state->getFormObject()->getEntity()->validate();
}

/**
 * Extra form submission handler for the user registration form.
 */
function tipster_form_user_register_form_submit(array &$form, FormStateInterface $form_state) {
    /** @var \Drupal\Core\Session\AccountInterface $account */
    $account = $form_state->getFormObject()->getEntity();
    $profiles = $form_state->get('profiles');
    if (!empty($profiles)) {
        foreach ($profiles as $bundle => $entity) {
            $entity->setOwnerId($account->id());
            $entity->setActive(TRUE);
            $entity->save();
        }
    }
}